!function(){"use strict";var e=class{constructor(e){this._element=document.querySelector(e),this._buttonClose=this._element.querySelector(".popup__button-close"),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._element.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._element.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._element.addEventListener("mousedown",(e=>{e.target.classList.contains("popup_opened")&&this.close()})),this._buttonClose.addEventListener("click",(()=>{this.close()}))}},t=class extends e{constructor(e,t,n){let{submitButtonLabel:s,submitButtonAltLabel:i}=t;super(e),this._handleFormSubmit=n,this._form=this._element.querySelector(".popup__form"),this._buttonSubmit=this._form.querySelector(".form__button-submit"),this._buttonSubmitLabel=s,this._buttonSubmitAltLabel=i,this._buttonSubmit.textContent=s}_getInputValues(){const e={};return[...this._form.querySelectorAll(".popup__input")].forEach((t=>{e[t.name]=t.value})),e}setSubmitHandler(e){this._handleFormSubmit=e}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues(),this)})),super.setEventListeners()}showLoading(){this._buttonSubmit.textContent=this._buttonSubmitAltLabel}hideLoading(){this._buttonSubmit.textContent=this._buttonSubmitLabel}close(){super.close(),this._form.reset()}};const n=e=>e.ok?e.json():Promise.reject("".concat(e.status," ").concat(e.statusText));const s="Save",i="Saving...",r=document.querySelector(".popup__container_content_edit-profile").querySelector(".form"),o=r.querySelector(".form__input_type_name"),a=r.querySelector(".form__input_type_job"),l=document.querySelector(".popup_content_edit-avatar").querySelector(".form"),_=(l.querySelector(".form__input_type_link"),document.querySelector(".popup__container_content_add-card").querySelector(".form"));let c="";const h=new class{constructor(e){let{serverUrl:t,groupId:n,token:s}=e;this._serverUrl=t,this._groupId=n,this._token=s}setup(){this._mainUrl="".concat(this._serverUrl,"/v1/").concat(this._groupId),this._headers={authorization:this._token,"Content-Type":"application/json"}}addNewCard(e){let{name:t,link:s}=e;return fetch("".concat(this._mainUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(n)}getUserData(){return fetch("".concat(this._mainUrl,"/users/me"),{headers:this._headers}).then(n)}removeLike(e){return fetch("".concat(this._mainUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(n)}addLike(e){return fetch("".concat(this._mainUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(n)}setUserData(e){let{name:t,about:s}=e;return fetch("".concat(this._mainUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(n)}setUserAvatar(e){return fetch("".concat(this._mainUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(n)}removeCard(e){return fetch("".concat(this._mainUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(n)}getInitialCardsData(){return fetch("".concat(this._mainUrl,"/cards"),{headers:this._headers}).then(n)}getInitialData(){return Promise.all([this.getUserData(),this.getInitialCardsData()])}}({serverUrl:"https://around.nomoreparties.co",groupId:"group-12",token:"652541db-3ac9-4c6c-9895-39ab2ae4c9f3"}),u=document.querySelector(".profile"),m=u.querySelector(".profile-info__button-edit"),d=u.querySelector(".profile__button-add"),p=u.querySelector(".avatar"),b=new class{constructor(e){let{nameSelector:t,jobSelector:n,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(n),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,job:n,avatar:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=n,this._avatarElement.src=s}}({nameSelector:".profile-info__name",jobSelector:".profile-info__job",avatarSelector:".avatar"}),L=new class extends e{constructor(e){super(e),this._image=this._element.querySelector(".popup__image"),this._imageTitle=this._element.querySelector(".popup__image-title")}open(e,t){this._imageTitle.textContent=e,this._image.alt=e,this._image.src=t,super.open()}}(".popup_content_image"),v={},g=new t(".popup_content_confirmation",{submitButtonLabel:"Yes",submitButtonAltLabel:"Deleting..."});g.setEventListeners();const S=(e,t)=>{const n=new class{constructor(e,t){let{name:n,link:s,id:i,likes:r,ownerId:o,templateSelector:a,handleCardClick:l,handleDeleteCard:_,handleLikeClick:c}=e;var h,u;u=()=>this._likes.some((e=>e._id===this._userId)),(h="_isLiked")in this?Object.defineProperty(this,h,{value:u,enumerable:!0,configurable:!0,writable:!0}):this[h]=u,this._imageTitle=n,this._imageUrl=s,this._id=i,this._likes=r,this._ownerId=o,this._templateSelector=a,this._handleCardClick=l,this._handleDeleteCard=_,this._handleLikeClick=c,this._userId=t}_getTemplate(){this._element=document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_defineElementVariables(){this._elementImage=this._element.querySelector(".element__image"),this._elementButtonDelete=this._element.querySelector(".element__button_action_delete"),this._elementTitle=this._element.querySelector(".element__title"),this._likeCounter=this._element.querySelector(".element__like-counter"),this.elementButtonLike=this._element.querySelector(".element__button_action_like")}_setEventListeners(){this._elementImage.addEventListener("click",(()=>{this._handleCardClick(this._imageTitle,this._imageUrl)})),this._elementButtonDelete.addEventListener("click",(()=>{this._handleDeleteCard(this._id)})),this.elementButtonLike.addEventListener("click",(()=>{this._handleLikeClick(this._id)}))}_hideDeleteButton(){this._userId!==this._ownerId&&this._elementButtonDelete.classList.add("element__button_inactive")}_updateLikesCount(e){this._likeCounter.textContent=e}_renderLikes(){this._updateLikesCount(this._likes.length),this._isLiked()?this._setLikeIconActive():this._setLikeIconInactive()}updateLikes(e){this._likes=e,this._renderLikes()}_setLikeIconActive(){this.elementButtonLike.classList.add("element__button_action_like_active")}_setLikeIconInactive(){this.elementButtonLike.classList.remove("element__button_action_like_active")}generateCard(){return this._getTemplate(),this._defineElementVariables(),this._hideDeleteButton(),this._setEventListeners(),this._renderLikes(),this._elementImage.src=this._imageUrl,this._elementTitle.textContent=this._imageTitle,this._elementImage.alt=this._imageTitle,this._element}removeElement(){this._element.remove(),this._element=null}}({name:e.name,link:e.link,id:e._id,likes:e.likes,ownerId:e.owner._id,templateSelector:"#template-element",handleCardClick:(e,t)=>{L.open(e,t)},handleDeleteCard:e=>{g.open(),g.setSubmitHandler((()=>{g.showLoading(),h.removeCard(e).then((()=>{n.removeElement(),g.close()})).catch((e=>console.log("Error:     ".concat(e)))).finally((()=>g.hideLoading()))}))},handleLikeClick:e=>{n.elementButtonLike.classList.contains("element__button_action_like_active")?h.removeLike(e).then((e=>{n.updateLikes(e.likes)})).catch((e=>console.log(e))):h.addLike(e).then((e=>{n.updateLikes(e.likes)})).catch((e=>console.log(e)))}},t);return n.generateCard()},E=new t(".popup_content_edit-profile",{submitButtonLabel:s,submitButtonAltLabel:i},((e,t)=>(t.showLoading(),h.setUserData({name:e.name,about:e.job}).then((e=>{b.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),t.close()})).catch((e=>console.log("Error:     ".concat(e)))).finally((()=>{t.hideLoading()}))))),k=new t(".popup_content_edit-avatar",{submitButtonLabel:s,submitButtonAltLabel:i},((e,t)=>(t.showLoading(),h.setUserAvatar(e.link).then((e=>{b.setUserInfo({name:e.name,job:e.about,avatar:e.avatar}),t.close()})).catch((e=>console.log("Error:     ".concat(e)))).finally((()=>{t.hideLoading()})))));var f;h.setup(),h.getInitialData().then((e=>{let[n,s]=e;b.setUserInfo({name:n.name,job:n.about,avatar:n.avatar});const i=new class{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._section=document.querySelector(t)}addItem(e){this._section.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}({items:s,renderer:e=>{const t=S(e,n._id);i.addItem(t)}},".elements");i.renderItems(),c=n._id;const r=new t(".popup_content_add-card",{submitButtonLabel:"Create",submitButtonAltLabel:"Creating..."},((e,t)=>{t.showLoading(),h.addNewCard({name:e.title,link:e.link}).then((e=>{const n=S(e,c);i.addItem(n),t.close()})).catch((e=>{console.log("Error:     ".concat(e))})).finally((()=>{t.hideLoading()}))}));r.setEventListeners(),d.addEventListener("click",(()=>{_.reset(),v[_.getAttribute("name")].resetInputValidation(),r.open()}))})).catch((e=>console.log("Error:     ".concat(e)))),L.setEventListeners(),E.setEventListeners(),k.setEventListeners(),f={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},Array.from(document.querySelectorAll(f.formSelector)).forEach((e=>{const t=new class{constructor(e,t){this._formElement=t,this._settings=e}_getErrorElement(e){return this._formElement.querySelector("#".concat(e.id,"-error"))}_showInputError(e,t){e.classList.add(this._settings.inputErrorClass),t.classList.add(this._settings.errorClass),t.textContent=e.validationMessage}_hideInputError(e,t){e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){const t=this._getErrorElement(e);e.validity.valid?this._hideInputError(e,t):this._showInputError(e,t)}_clearInputErrors(){this._inputList.forEach((e=>{this._hideInputError(e,this._getErrorElement(e))}))}_disableButtonSubmit(){this._buttonSubmit.classList.add(this._settings.inactiveButtonClass),this._buttonSubmit.disabled=!0}_enableButtonSubmit(){this._buttonSubmit.classList.remove(this._settings.inactiveButtonClass),this._buttonSubmit.disabled=!1}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this._disableButtonSubmit():this._enableButtonSubmit()}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonSubmit=this._formElement.querySelector(this._settings.submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetInputValidation(){this._clearInputErrors(),this._disableButtonSubmit()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(f,e),n=e.getAttribute("name");v[n]=t,t.enableValidation()})),m.addEventListener("click",(()=>{(()=>{const e=b.getUserInfo();o.value=e.name,a.value=e.job})(),v[r.getAttribute("name")].resetInputValidation(),E.open()})),p.addEventListener("click",(()=>{v[l.getAttribute("name")].resetInputValidation(),k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,